// a가 Null 이면 a에 0을 할당
// a가 Null 이 아니면 ?? 연산자와 동일하게 a 값 그대로
a ??= 0;


		??=    ===> null 연산자를 리스트에도 
List<int> scores;
 
// scores 리스트가 new 객체로 생성되지 않은 체
// Add 함수를 실행했다면 Null Exception 에러를 많이 봤을 것이다.
// 그래서 scores 리스트가 Null 이면 new 객체로 생성시켜 scores에 대딥하는 코드이다.
// 진짜 획기적이다.
scores ??= new List<int>();
 
scores.Add(1);



// 변수
List<int> scores;
int? size;
 
// 1. 삼항연산자를 사용
size = scores == null ? null : (int?)scores.Count;
 
// 2. ?. 연사자를 사용
// scores 객체가 null인지 체크 후
// null 이면 null을 리턴
// null 이 아니면 .Count 를 실행하게 됩니다.
// .Count 속성뿐만 아니라 해당 객체의 메서드/필드도 사용가능하다.
size = scores?.Count;
 
// 3. ?. // ?? 연산자 콜라보레이션
// scores 객체가 null 이면 0
// null 이 아니면 scores.Count 값을 리턴해주게 됩니다.
// ?. // ?? 두개의 연산자를 함께 쓰는 경우가 많으니 숙지하자.
size = scores?.Count ?? 0;
 
// 4. ?[] 리스트의 indexer를 이용해서 찾을 있다.
// n번째에 있는 값이 null이면 null을
// null이 아니면 그 값을 리턴해준다.
size = scores?[0];


출처 : https://im-first-rate.tistory.com/44