#include<stdio.h>


// 퀵 정렬 :: 평균속도 (N logN) 최악은 O(N^2)
// 좌, 우 피벗값 나눠서 하기 때문에 O(N * logn)

// 거의 정렬된 것에서는 
// 분할하는 이점을 사용하지 못하기때문에 오래걸림

int number = 10;
int data[10] = { 1, 10, 5, 8, 7, 6, 4, 3, 2, 9 };

void quickSort(int* data, int start, int end) {
	
	if (start >= end) { //원소가 1개인 경우
		return;
	}

	int pivot = start;
	int i = start + 1;
	int j = end;
	int temp;

	while (i <= j) { // 엇갈릴 때까지 반복
		while (data[i] <= data[pivot]) 
		{ //피벗보다 큰 값 만날때까지
			i++;
		}
		while (data[j] >= data[pivot] && j > start) 
		{ //피벗보다 더 작은 값 만날때 까지
			j--;
		}
		if (i > j) // 엇갈린 상태가 되었다면
		{
			temp = data[j];
			data[j] = data[pivot];
			data[pivot] = temp;
		}
		else
		{
			temp = data[j];
			data[j] = data[i];
			data[i] = temp;
		}
	}
	
	quickSort(data, start, j - 1);
	quickSort(data, j + 1, end);
}

int main(void) {
	
	quickSort(data, 0, number-1);

	for (size_t i = 0; i < number; i++)
	{
		printf("%d ", data[i]);
	}

}

//내림차순으로 바꿀 때 
 
//while (data[i] >= data[pivot])
//{ //피벗보다 큰 값 만날때까지
//	i++;
//}
//while (data[j] <= data[pivot] && j > start)
//{ //피벗보다 더 작은 값 만날때 까지
//	j--;
//}
