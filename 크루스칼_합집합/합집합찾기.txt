#include<stdio.h>

// x가 해당 부모의 값이랑 동일하다면
	// 1 2 3 4 5 6 7 8 
	// 1 1 2 3 4 5 7 8
	// 일때 3->2, 2-> 1을 가리킬 수 있도록 함.
	// 이어져 있는 부모노드를 찾음

// Union-Find(합집합 찾기) ====> 크루스칼 알고리즘에 응용가능

int getParent(int parent[], int x) {
	
	if (parent[x] == x) return x;
	return parent[x] = getParent(parent, parent[x]);
}

//두 부모 노드를 합치는 함수
void unionParent(int parent[], int a, int b) {
	// 각각의 부모 값을 구한 뒤
	a = getParent(parent, a);
	b = getParent(parent, b);

	// 부모 노드 초기화
	if (a < b) parent[b] = a;
	else parent[a] = b;
}

//같은 부모를 가지는지 확인 == 같은 그래프에 있는지

int findParent(int parent[], int a, int b) {
	a = getParent(parent, a);
	b = getParent(parent, b);
	if (a == b)return 1;
	return 0;
}

int main(void) {
	int parent[11];
	for (int i = 0; i <= 10; i++)
	{
		parent[i] = i;
	}
	unionParent(parent, 1, 2);
	unionParent(parent, 2, 3);
	unionParent(parent, 3, 4);
	unionParent(parent, 5, 6);
	unionParent(parent, 6, 7);
	unionParent(parent, 7, 8);
	printf("1과 5는 연결되었는가? %d\n", findParent(parent, 1,5));
	unionParent(parent, 1, 7);
	printf("1과 5는 연결되었는가? %d", findParent(parent, 1, 5));

}