#include<istream>

using namespace std;

// 문자열 매칭 
// 라빈 - 카프 알고리즘 
// 해시 이용하는 것 ==> 오버플로우 발생해도 결과값은 동일
// 단순 비교는 해시만 연결짓고 출력이라 O(1)로 빠름

void findString(string parent, string pattern) {

	int parentSize = parent.size();
	int patternSize = pattern.size();
	int parentHash = 0, patternHash = 0, power = 1;

	for (int i = 0; i <= parentSize - patternSize; i++)
	{
		if (i == 0) {
			for (int j = 0; j < patternSize; j++)
			{
				parentHash = parentHash + parent[patternSize - 1 - j] * power;
				patternHash = patternHash + pattern[patternSize - 1 - j] * power;
				if (j < patternSize - 1) power = power * 2;
			}
		}
		else
		{
			parentHash = 2 * (parentHash - parent[i - 1] * power) + parent[patternSize - 1 + i];
		}
		if (parentHash == patternHash) {
			bool finded = true;
			for (int j = 0; j < patternSize; j++)
			{
				if (parent[i + j] != pattern[j]) {
					finded = false;
						break;
				}
			}
			if (finded) {
				printf("%d 번째에서 발견했습니다\n", i + 1);
			}
		}
	}
}

int main(void) {
	string parent = "ababacabacaabacaaba";
	string pattern = "abacaaba";
	findString(parent, pattern);
	return 0;
}