#include<istream>
#include<vector>
#define MAX 1001

using namespace std;

// 일을 두가지를 할 수있는 경우에 
// for문으로 2회 돌릴거라고 감싸줬음
// 	for (int i = 0; i < 2; i++)
//{
//	for (int i = 0; i <= n; i++)
//	{
//		fill(c, c + MAX, false);
//		if (dfs(i)) count++;
//	}
//}


// 네트워크 플로우의 연계되는 개념인
// 이분 매칭
vector<int> a[MAX];
int d[MAX];
bool c[MAX];
int n, m, s, k;

// 매칭에 성공한 경우 true, 아니면 false
bool dfs(int x) {
	// 연결된 모든 노드에 대해 들어갈 수 있는지 시도
	for (int i = 0; i < a[x].size(); i++)
	{
		int t = a[x][i];
		// 이미 방문한 노드는 패스
		if (c[t]) continue;
		c[t] = true;

		// 비어있거나 점유 노드에 더 들어갈 수있는 경우
		if (d[t] == 0 || dfs(d[t])) {
			d[t] = x;
			return true;
		}
	}
	return false;
}

int main(void) {
	scanf_s("%d %d %d", &n, &m, &k);

	for (int i = 1; i <= n; i++)
	{
		scanf_s("%d", &s);
		for (int j = 1; j <= s; j++)
		{
			int t;
			scanf_s("%d", &t);
			a[i].push_back(t);
		}
	}
	
	int count = 0;
	// 최대한 넣기
	for (int i = 0; i <= n; i++)
	{
		fill(c, c + MAX, false);
		if (dfs(i)) count++;
	}

	int extra = 0;
		for (int i = 0; i <= n && extra < k; i++)
		{
			fill(c, c + MAX, false);
			if (dfs(i)) extra++;
		}
	
	printf("%d\n", count + extra);
	
}
