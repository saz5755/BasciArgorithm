#include<iostream>

using namespace std;

const int number = 15;

// 하나의 노드 정보를 선언
typedef struct  node* treePointer;

typedef struct node {
	int data;
	treePointer leftChild, rightChild;
} node;


// 전위 순회를 구현 
void preorder(treePointer ptr) {
	//포인터가 null값이 아니라면
	if (ptr) {
		cout << ptr->data << ' ';
		preorder(ptr->leftChild);
		preorder(ptr->rightChild);
	}
}

// 중위 순회를 구현
void inorder(treePointer ptr) {
	//포인터가 null값이 아니라면
	if (ptr) {
		inorder(ptr->leftChild);
		cout << ptr->data << ' ';
		inorder(ptr->rightChild);
	}
}

// 후위 순회를 구현
void postorder(treePointer ptr) {
	//포인터가 null값이 아니라면
	if (ptr) {
		postorder(ptr->leftChild);
		postorder(ptr->rightChild);
		cout << ptr->data << ' ';
	}
}

int main(void) {
	node nodes[number + 1];
	for (int i = 0; i < number; i++)
	{
		// 1~15까지 자기 자신 들어가도록 기본 세팅
		nodes[i].data = i;
		nodes[i].leftChild = NULL;
		nodes[i].rightChild = NULL;
	}

		for (int i = 0; i < number; i++)
		{
			if (i % 2 == 0) {
				//짝수라면 부모노드의 왼쪽에 주소값 넣어줌
				nodes[i / 2].leftChild = &nodes[i];
			}
			else {
				nodes[i / 2].rightChild = &nodes[i];
			}
		}

		preorder(&nodes[1]);
		cout << endl;
		inorder(&nodes[1]);
		cout << endl;
		postorder(&nodes[1]);
	}

