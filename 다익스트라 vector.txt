#include<iostream>
#include<vector>
#include<queue>

//다익스트라 :: 최단 경로 탐색 

using namespace std;
int number = 6;
int INF = 10000000;//못가는 거리

vector<pair<int, int>> a[7]; //간선 정보
int d[7]; //최소비용

void dijkstra(int start)
{
	d[start] = 0;//시작점과의 거리는 0
	priority_queue<pair<int, int>> pq;
	pq.push({ 0,start });

	while (!pq.empty())
	{
		int current = pq.top().second; //current는 현재 방문 정점 같다.
		//우선순위큐는 큰값이 맨 앞에 오므로
		//짧은 것이 먼저 오도록 음수화
		int distance = -pq.top().first;
		pq.pop();
		//최단 거리가 아닌 경우 스킵
		if (d[current] < distance)
			continue;
		for (int i = 0; i < a[current].size(); i++)//현재 노드인 current와 연결된 간선 모두 검사
		{//선택된 노드의 인접 노드
			int next = a[current][i].second;
			//선택된 노드를 인접 노드로 거쳐서 가는 비용
			int nextDistance = distance + a[current][i].first;
			//기존의 최소 비용보다 더 저렴하다면 교체합니다.
			if (nextDistance < d[next])
			{
				d[next] = nextDistance;
				pq.push({ -nextDistance, next });
			}
		}
	}

}
int main()
{
	ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);
	//기본적으로 연결되지 않은 경우 비용은 무한입니다.
	for (int i = 1; i <= number; i++)
	{
		d[i] = INF;
	}

	a[1].push_back({ 2,2 });
	a[1].push_back({ 5,3 });//1번 노드에서 3번 노드로 가는 비용은 5
	a[1].push_back({ 1,4 });

	a[2].push_back({ 2,1 });
	a[2].push_back({ 3,3 });
	a[2].push_back({ 2,4 });

	a[3].push_back({ 5,1 });
	a[3].push_back({ 3,2 });
	a[3].push_back({ 3,4 });
	a[3].push_back({ 1,5 });
	a[3].push_back({ 5,6 });

	a[4].push_back({ 1,1 });
	a[4].push_back({ 2,2 });//4번 노드에서 2번 노드로 가는 비용이 2다.
	a[4].push_back({ 3,3 });
	a[4].push_back({ 1,5 });

	a[5].push_back({ 1,3 });
	a[5].push_back({ 1,4 });
	a[5].push_back({ 2,6 });

	a[6].push_back({ 5,3 });
	a[6].push_back({ 2,5 });

	dijkstra(1); //정점 1에서 다이스트라 시작

	for (int i = 1; i <= number; i++)
	{
		printf("%d ", d[i]);
	}

}